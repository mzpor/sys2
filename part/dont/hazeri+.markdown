# سناریوی ربات حضور و غیاب

## هدف
ایجاد یک ربات تلگرامی که به مربی اجازه می‌دهد حضور و غیاب کاربران را به صورت تعاملی با استفاده از کیبورد شیشه‌ای (inline keyboard) ثبت کند و گزارش نهایی را به صورت متنی و JSON تولید کند.

## پیش‌نیازها
- **کتابخانه‌ها**: `python-telegram-bot` برای تعامل با تلگرام یا `requests` برای ارسال به API.
- **API (اختیاری)**: در صورت وجود API برای ذخیره‌سازی داده‌ها.
- **ذخیره‌سازی محلی**: دیکشنری یا فایل JSON برای ذخیره موقت (در صورت عدم وجود API).
- **کاربران نمونه**: لیست 10 کاربر به صورت `کاربر1` تا `کاربر10`.
- **وضعیت‌ها**: چهار گزینه: `حاضر`، `تاخیر`، `غایب`، `موجه`.

## سناریو

### 1. شروع فرآیند
- **ورودی مربی**: مربی پیام `لیست حضور غیاب` را به ربات ارسال می‌کند.
- **پاسخ ربات**:
  ```
  سلام مربی عزیز 👋
  برای ثبت حضور و غیاب، لطفاً روی دکمه زیر کلیک کنید:
  [📋 لیست حضور و غیاب]
  ```
  - دکمه شیشه‌ای با `callback_data="start_attendance"` به پیام متصل است.

### 2. نمایش لیست کاربران
- پس از کلیک روی دکمه `لیست حضور و غیاب`، ربات برای هر کاربر یک پیام جداگانه با کیبورد شیشه‌ای ارسال می‌کند.
- **پیام نمونه برای هر کاربر**:
  ```
  📋 کاربر1
  لطفاً وضعیت را انتخاب کنید:
  ```
  - کیبورد شیشه‌ای شامل چهار دکمه:
    - `[✅ حاضر]` (`callback_data="status_کاربر1_حاضر"`)
    - `[⏱ تاخیر]` (`callback_data="status_کاربر1_تاخیر"`)
    - `[🚫 غایب]` (`callback_data="status_کاربر1_غایب"`)
    - `[📄 موجه]` (`callback_data="status_کاربر1_موجه"`)
- این فرآیند برای `کاربر2` تا `کاربر10` تکرار می‌شود.

### 3. ثبت وضعیت
- **کلیک روی دکمه**:
  - مربی روی یکی از دکمه‌های کیبورد شیشه‌ای کلیک می‌کند.
  - ربات `callback_data` را پردازش می‌کند و اطلاعات کاربر و وضعیت را استخراج می‌کند (مثلاً `کاربر1` و `حاضر`).
- **ذخیره‌سازی**:
  - اگر API وجود دارد:
    - درخواست POST به آدرس API (مثلاً `https://your-attendance-api.com/submit`) با payload:
      ```json
      {
        "user": "کاربر1",
        "status": "حاضر"
      }
      ```
    - در صورت موفقیت (status code 200)، پیام تأیید:
      ```
      ✅ وضعیت کاربر1 ثبت شد: حاضر
      ```
    - در صورت خطا، پیام خطا و ذخیره محلی:
      ```
      ❌ خطا در ثبت برای کاربر1. ذخیره محلی انجام شد.
      ```
  - اگر API وجود ندارد:
    - وضعیت در دیکشنری محلی ذخیره می‌شود:
      ```python
      attendance_data["کاربر1"] = "حاضر"
      ```
- پیام تأیید برای مربی:
  ```
  ✔ وضعیت کاربر1 ثبت شد: حاضر
  ```

### 4. گزارش نهایی
- **دستور گزارش**: مربی پیام `نمایش گزارش` را ارسال می‌کند یا روی دکمه `[📊 نمایش گزارش]` کلیک می‌کند (`callback_data="generate_report"`).
- **پاسخ ربات**:
  - گزارش متنی:
    ```
    📋 گزارش نهایی حضور و غیاب:
    1. کاربر1 - ✅ حاضر
    2. کاربر2 - ⏱ تاخیر
    3. کاربر3 - 🚫 غایب
    4. کاربر4 - 📄 موجه
    ...
    ```
  - ذخیره گزارش در فایل JSON:
    ```json
    {
      "کاربر1": "حاضر",
      "کاربر2": "تاخیر",
      "کاربر3": "غایب",
      "کاربر4": "موجه",
      ...
    }
    ```
  - پیام تأیید:
    ```
    📎 گزارش در فایل 'attendance_report.json' ذخیره شد.
    ```

## ویژگی‌های اضافی
1. **ویرایش وضعیت**:
   - دکمه `[✏ ویرایش]` برای هر کاربر با `callback_data="edit_کاربر1"` که امکان انتخاب مجدد وضعیت را فراهم می‌کند.
2. **مدیریت خطا**:
   - اگر مربی ورودی نامعتبر (مثلاً کلیک روی دکمه اشتباه) بدهد:
     ```
     ❌ لطفاً فقط روی دکمه‌های مشخص‌شده کلیک کنید.
     ```
3. **ذخیره دائمی**:
   - استفاده از دیتابیس (مثل SQLite) به جای دیکشنری محلی برای ذخیره‌سازی دائمی.
4. **ارسال گزارش به ادمین**:
   - دکمه `[📤 ارسال به ادمین]` برای ارسال گزارش به یک کاربر خاص یا کانال تلگرامی.

## مزایا
- **کاربری آسان**: کیبورد شیشه‌ای فرآیند را سریع و تعاملی می‌کند.
- **انعطاف‌پذیری**: قابلیت اتصال به API یا ذخیره محلی.
- **قابلیت توسعه**: امکان افزودن ویژگی‌هایی مثل ویرایش، ارسال گزارش به ایمیل، یا ادغام با دیتابیس.
- **گزارش چندفرمتی**: خروجی متنی برای نمایش سریع و JSON برای تحلیل یا ادغام با سیستم‌های دیگر.

## ملاحظات پیاده‌سازی
- **کتابخانه پیشنهادی**: `python-telegram-bot` برای کیبورد شیشه‌ای و مدیریت callback.
- **امنیت**: اعتبارسنجی ورودی‌ها برای جلوگیری از خطاهای مربی.
- **مدیریت API**: بررسی اتصال به API و fallback به ذخیره‌سازی محلی در صورت قطعی.
- **مقیاس‌پذیری**: پشتیبانی از تعداد متغیر کاربران (داینامیک).

## نمونه خروجی
- **پیام اولیه**:
  ```
  سلام مربی عزیز 👋
  برای ثبت حضور و غیاب، لطفاً روی دکمه زیر کلیک کنید:
  [📋 لیست حضور و غیاب]
  ```
- **پیام کاربر**:
  ```
  📋 کاربر1
  لطفاً وضعیت را انتخاب کنید:
  [✅ حاضر] [⏱ تاخیر] [🚫 غایب] [📄 موجه]
  ```
- **پیام تأیید**:
  ```
  ✔ وضعیت کاربر1 ثبت شد: حاضر
  ```
- **گزارش نهایی**:
  ```
  📋 گزارش نهایی حضور و غیاب:
  1. کاربر1 - ✅ حاضر
  2. کاربر2 - ⏱ تاخیر
  ...
  📎 گزارش در فایل 'attendance_report.json' ذخیره شد.
  ```