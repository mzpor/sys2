### تفاوت سناریو و پرامپت

#### ۱. **سناریو (Scenario)**
سناریو یک شرح کلی و ساختاریافته از یک موقعیت، فرآیند یا جریان کاری است که معمولاً به‌صورت توصیفی و روایی ارائه می‌شود. در زمینه توسعه نرم‌افزار یا ربات (مانند کد ارائه‌شده)، سناریو توضیح می‌دهد که سیستم چگونه با کاربر یا محیط تعامل می‌کند، چه مراحلی طی می‌شود و چه خروجی‌هایی انتظار می‌رود. سناریو معمولاً شامل:
- **جریان کار**: مراحل و ترتیب تعاملات (مثلاً کاربر دکمه‌ای را فشار می‌دهد، ربات پاسخ می‌دهد).
- **هدف**: توصیف هدف سیستم یا فرآیند (مثلاً ثبت‌نام کاربر در یک کلاس).
- **جزئیات اجرایی**: مانند گزینه‌های کیبورد، پیام‌ها، یا اقدامات سیستم.
- **مخاطب**: توسعه‌دهندگان، طراحان سیستم، یا کاربرانی که نیاز به درک کلی عملکرد دارند.

**مثال**: در ربات پرداخت کلاس، سناریو توضیح می‌داد که کاربر چگونه از `/start` شروع می‌کند، کلاس را انتخاب می‌کند، صورتحساب دریافت می‌کند و پس از پرداخت لینک گروه را می‌گیرد.

#### ۲. **پرامپت (Prompt)**
پرامپت یک ورودی متنی مستقیم است که به یک مدل هوش مصنوعی (مانند Grok یا ChatGPT) ارائه می‌شود تا پاسخ خاصی تولید کند یا وظیفه‌ای را انجام دهد. پرامپت معمولاً شامل دستورالعمل‌ها، سؤالات، یا داده‌هایی است که مدل باید بر اساس آن‌ها عمل کند. ویژگی‌های پرامپت:
- **مستقیم و هدفمند**: برای دریافت پاسخ خاص از مدل طراحی می‌شود.
- **متن‌محور**: معمولاً یک متن کوتاه یا بلند است که به مدل می‌گوید چه کاری انجام دهد (مثلاً تولید متن، کد، یا تحلیل).
- **مخاطب**: مدل هوش مصنوعی.

**مثال**: 
```
"یک کد پایتون برای رباتی بنویس که به کاربران اجازه انتخاب کلاس‌های آموزشی و پرداخت هزینه آن‌ها را بدهد."
```
این یک پرامپت است که مستقیماً به هوش مصنوعی دستور می‌دهد کدی تولید کند.

#### تفاوت‌های کلیدی
| ویژگی | سناریو | پرامپت |
|-------|---------|--------|
| **هدف** | توصیف فرآیند یا جریان کار برای درک یا پیاده‌سازی | دستور مستقیم به هوش مصنوعی برای تولید خروجی خاص |
| **مخاطب** | انسان (توسعه‌دهندگان، طراحان) یا مستندات | مدل هوش مصنوعی |
| **ساختار** | روایی، چندمرحله‌ای، توصیفی | کوتاه، مستقیم، دستورالعمل‌محور |
| **جزئیات** | شامل جزئیات اجرایی و تعاملات | معمولاً کلی‌تر، با تمرکز بر هدف خاص |
| **کاربرد** | طراحی سیستم، مستندسازی، یا برنامه‌ریزی | تعامل با مدل‌های هوش مصنوعی برای تولید پاسخ |

---

### تفاوت پرامپت برای هوش مصنوعی‌های مختلف
پرامپت‌ها بسته به مدل هوش مصنوعی (مانند Grok، ChatGPT، Claude، یا Llama) ممکن است تفاوت‌هایی داشته باشند، زیرا هر مدل:
1. **معماری و آموزش متفاوت**:
   - مدل‌ها با داده‌های متفاوتی آموزش دیده‌اند و ممکن است به سبک‌های خاصی از پرامپت بهتر پاسخ دهند.
   - مثلاً Grok ممکن است به پرامپت‌های منطقی و ساختارمند بهتر پاسخ دهد، در حالی که ChatGPT به پرامپت‌های محاوره‌ای‌تر حساس است.

2. **قابلیت‌های زبانی**:
   - برخی مدل‌ها (مثل Claude) در درک زمینه‌های پیچیده یا پرامپت‌های طولانی بهتر عمل می‌کنند.
   - مدل‌های دیگر (مثل Llama) ممکن است برای وظایف خاص مانند کدنویسی به پرامپت‌های دقیق‌تر نیاز داشته باشند.

3. **حساسیت به ساختار پرامپت**:
   - **ChatGPT (OpenAI)**: به پرامپت‌های محاوره‌ای و خلاقانه خوب پاسخ می‌دهد، اما گاهی نیاز به توضیحات اضافی برای رفع ابهام دارد.
   - **Grok (xAI)**: برای پرامپت‌های منطقی و وظیفه‌محور بهینه شده و معمولاً به دستورات واضح و مستقیم پاسخ بهتری می‌دهد.
   - **Claude (Anthropic)**: به پرامپت‌های ساختارمند و اخلاق‌محور حساس است و از پاسخ به محتوای حساس اجتناب می‌کند.

4. **محدودیت‌ها**:
   - برخی مدل‌ها محدودیت‌هایی در پردازش محتوای خاص (مثل محتوای حساس یا پیچیده) دارند.
   - مثلاً Grok ممکن است برای جستجوی وب یا تحلیل محتوای خارجی به ابزارهای خاصی (مانند DeepSearch) وابسته باشد.

---

### اصول مشترک در نوشتن پرامپت
برای نوشتن پرامپت‌های مؤثر برای هر مدل هوش مصنوعی، این اصول مشترک را رعایت کنید:
1. **وضوح (Clarity)**:
   - از زبان ساده و مستقیم استفاده کنید.
   - هدف را به‌صراحت بیان کنید (مثلاً "یک کد بنویس"، "متن را خلاصه کن").
2. **مشخص بودن (Specificity)**:
   - جزئیات کافی ارائه دهید (مثلاً زبان برنامه‌نویسی، نوع خروجی، یا محدودیت‌ها).
   - مثال: "یک تابع پایتون برای محاسبه فاکتوریل بنویس که ورودی عدد صحیح بگیرد."
3. **زمینه‌سازی (Context)**:
   - اگر زمینه خاصی نیاز است، آن را ارائه دهید (مثلاً "برای یک ربات تلگرامی" یا "برای یک مخاطب مبتدی").
4. **ساختارمند بودن**:
   - پرامپت را به بخش‌های واضح تقسیم کنید (مثلاً "وظیفه: ...، محدودیت‌ها: ...، خروجی مورد انتظار: ...").
5. **اجتناب از ابهام**:
   - از کلمات مبهم مانند "خوب" یا "مناسب" بدون تعریف دقیق اجتناب کنید.
6. **دستورالعمل صریح**:
   - بگویید مدل دقیقاً چه کاری انجام دهد (مثلاً "فقط کد بنویس، توضیح نده" یا "پاسخ را در 100 کلمه خلاصه کن").

---

### کلمات پایدار و بدون ابهام برای پرامپت
برای کاهش ابهام و افزایش پایداری پرامپت، از کلمات و عبارات زیر استفاده کنید:
- **افعال دستوری واضح**: بنویس، تولید کن، خلاصه کن، توضیح بده، تحلیل کن، محاسبه کن، مقایسه کن.
- **مشخص‌کننده‌ها**:
  - **نوع خروجی**: کد، متن، جدول، لیست، پاراگراف.
  - **زبان**: پایتون، جاوااسکریپت، فارسی، انگلیسی.
  - **طول**: کوتاه (50 کلمه)، مفصل (500 کلمه)، یک پاراگراف.
  - **مخاطب**: مبتدی، حرفه‌ای، عمومی.
- **کلمات محدودکننده**: فقط، صرفاً، بدون، شامل، با فرمت.
- **کلمات زمینه‌ساز**: برای، در زمینه، با هدف، بر اساس.
- **کلمات اولویت‌بندی**: ابتدا، سپس، در نهایت.

**مثال پرامپت پایدار**:
```
"یک تابع پایتون بنویس که فاکتوریل یک عدد صحیح را محاسبه کند. فقط کد را ارائه کن، بدون توضیح. ورودی یک عدد صحیح مثبت است و خروجی باید عدد فاکتوریل باشد."
```

**مثال پرامپت مبهم** (باید اجتناب شود):
```
"یه چیزی درباره فاکتوریل بنویس."
```

---

### نکات برای پرامپت‌نویسی در مدل‌های مختلف
1. **برای Grok**:
   - پرامپت‌های منطقی و وظیفه‌محور بنویسید.
   - مثال: "یک کد پایتون برای ربات تلگرامی بنویس که کاربران را به گروه اضافه کند."
   - از ابزارهایی مثل DeepSearch برای جستجوی اطلاعات به‌روز استفاده کنید.
2. **برای ChatGPT**:
   - پرامپت‌های محاوره‌ای‌تر قابل‌قبول هستند.
   - مثال: "لطفاً یک برنامه پایتون برای ربات تلگرامی بنویس که به کاربران اجازه ثبت‌نام در کلاس بدهد."
3. **برای Claude**:
   - پرامپت‌های ساختارمند و اخلاق‌محور بنویسید.
   - مثال: "یک کد پایتون برای ربات آموزشی بنویس که شامل گزینه‌های پرداخت امن باشد."
4. **برای مدل‌های متن‌باز (مانند Llama)**:
   - پرامپت‌ها باید بسیار دقیق و با جزئیات باشند، زیرا این مدل‌ها ممکن است کمتر زمینه را حدس بزنند.
   - مثال: "یک تابع پایتون بنویس که با API تلگرام کار کند و پیام خوش‌آمدگویی به کاربر ارسال کند. توکن ربات را به‌صورت ثابت در کد قرار بده."

---

### جمع‌بندی
- **سناریو** برای توصیف فرآیند کلی و تعاملات سیستم است، در حالی که **پرامپت** دستور مستقیمی به هوش مصنوعی برای تولید خروجی خاص است.
- پرامپت‌ها بسته به مدل هوش مصنوعی نیاز به تنظیم دارند، اما اصول مشترک شامل وضوح، مشخص بودن، و ارائه زمینه است.
- برای پرامپت‌های پایدار، از افعال دستوری، کلمات مشخص‌کننده، و ساختار منظم استفاده کنید و از ابهام اجتناب کنید.

اگر نیاز به مثال‌های بیشتر یا راهنمایی برای نوشتن پرامپت برای مدل خاصی دارید، بگویید!