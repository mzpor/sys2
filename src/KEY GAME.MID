```markdown
# سناریوی ربات تلگرامی با دکمه‌های پویا

## توضیحات کلی
این ربات تلگرامی با استفاده از API پیام‌رسان **بله** (Bale) طراحی شده است و قابلیت مدیریت دکمه‌های پویا را دارد. کاربران می‌توانند با انتخاب تعداد دکمه‌ها (۱ تا ۳) و استفاده از دکمه‌های کنترلی (+ و -)، تعداد دکمه‌های نمایش‌داده‌شده را تغییر دهند. این ربات با استفاده از یک سیستم حالت‌مند (state-based) عمل می‌کند و وضعیت هر کاربر را ذخیره می‌کند.

---

## سناریو

### ۱. شروع کار با ربات
- کاربر دستور `/start` را ارسال می‌کند.
- ربات پیام خوش‌آمدگویی نمایش می‌دهد و یک کیبورد با سه گزینه (۱، ۲، ۳) برای انتخاب تعداد دکمه‌ها ارائه می‌کند.
- وضعیت کاربر در دیکشنری `user_states` ذخیره می‌شود با حالت اولیه (`normal`) و تعداد دکمه‌های صفر.

**مثال پیام ربات:**
```
🎓 خوش آمدید! یکی از گزینه‌ها رو انتخاب کنید:
[ [۱] [۲] [۳] ]
```

---

### ۲. انتخاب تعداد دکمه‌ها
- کاربر یکی از گزینه‌های ۱، ۲ یا ۳ را انتخاب می‌کند.
- ربات تعداد دکمه‌های انتخاب‌شده را نمایش می‌دهد و یک کیبورد جدید با دکمه‌های پویا (مانند "گزینه ۱"، "گزینه ۲" و غیره) به همراه دکمه‌های کنترلی `+` و `-` می‌سازد.
- وضعیت کاربر به حالت `dynamic` تغییر می‌کند و تعداد دکمه‌های انتخاب‌شده در `user_states` ذخیره می‌شود.

**مثال برای انتخاب گزینه ۳:**
```
۳ دکمه معمولی فعال شد:
[ [گزینه ۱] [گزینه ۲] [گزینه ۳] ]
[ [+] [-] ]
```

---

### ۳. افزایش تعداد دکمه‌ها (+)
- کاربر دکمه `+` را انتخاب می‌کند.
- اگر تعداد دکمه‌ها کمتر از ۸ باشد، تعداد دکمه‌ها یک واحد افزایش می‌یابد.
- کیبورد جدید با تعداد دکمه‌های به‌روز‌شده و دکمه‌های کنترلی نمایش داده می‌شود.
- اگر تعداد دکمه‌ها به حداکثر (۸) رسیده باشد، پیام خطا نمایش داده می‌شود:
  ```
  🚫 بیشتر از ۸ دکمه مجاز نیست!
  ```

**مثال برای افزایش از ۳ به ۴ دکمه:**
```
تعداد دکمه‌ها: ۴
[ [گزینه ۱] [گزینه ۲] [گزینه ۳] ]
[ [گزینه ۴] ]
[ [+] [-] ]
```

---

### ۴. کاهش تعداد دکمه‌ها (-)
- کاربر دکمه `-` را انتخاب می‌کند.
- اگر تعداد دکمه‌ها بیشتر از ۲ باشد، تعداد دکمه‌ها یک واحد کاهش می‌یابد.
- کیبورد جدید با تعداد دکمه‌های به‌روز‌شده و دکمه‌های کنترلی نمایش داده می‌شود.
- اگر تعداد دکمه‌ها به حداقل (۲) رسیده باشد، پیام خطا نمایش داده می‌شود:
  ```
  🚫 کمتر از ۲ دکمه مجاز نیست!
  ```

**مثال برای کاهش از ۴ به ۳ دکمه:**
```
تعداد دکمه‌ها: ۳
[ [گزینه ۱] [گزینه ۲] [گزینه ۳] ]
[ [+] [-] ]
```

---

## جزئیات فنی

### توابع اصلی
1. **`send_message(chat_id, text, keyboard=None)`**
   - پیام متنی به کاربر ارسال می‌کند.
   - در صورت وجود کیبورد، آن را به‌صورت JSON به درخواست اضافه می‌کند.
   - از `requests.post` برای ارسال درخواست به API بله استفاده می‌کند.

2. **`build_buttons(count)`**
   - کیبورد پویا با تعداد دکمه‌های مشخص‌شده (حداکثر ۳ دکمه در هر ردیف) می‌سازد.
   - دکمه‌ها با نام‌های "گزینه ۱"، "گزینه ۲" و غیره تولید می‌شوند.

3. **`build_control_buttons()`**
   - دکمه‌های کنترلی `+` و `-` را در یک ردیف تولید می‌کند.

4. **`get_updates(offset=None)`**
   - آخرین آپدیت‌ها را از API بله دریافت می‌کند.
   - از `offset` برای جلوگیری از پردازش آپدیت‌های تکراری استفاده می‌شود.

5. **`main()`**
   - حلقه اصلی ربات که به‌صورت مداوم آپدیت‌ها را بررسی می‌کند.
   - پیام‌های ورودی را پردازش کرده و بر اساس حالت کاربر پاسخ مناسب تولید می‌کند.

### ساختار داده‌ها
- **`user_states`**: دیکشنری که وضعیت هر کاربر (بر اساس `chat_id`) را ذخیره می‌کند.
  - کلید: `user_id` (به‌صورت رشته).
  - مقدار: دیکشنری شامل `mode` (حالت کاربر: `normal` یا `dynamic`) و `count` (تعداد دکمه‌ها).

### محدودیت‌ها
- حداکثر تعداد دکمه‌ها: ۸
- حداقل تعداد دکمه‌ها: ۲
- دکمه‌ها در ردیف‌های حداکثر ۳ تایی نمایش داده می‌شوند.

---

## پیش‌نیازها
- نصب پکیج `requests`:
  ```bash
  pip install requests
  ```
- تنظیم `TOKEN` معتبر برای ربات بله.
- دسترسی به API پیام‌رسان بله.

---

## نکات پیاده‌سازی
- **مدیریت خطا**: در کد فعلی، خطاهای احتمالی API (مانند قطعی سرور یا توکن نامعتبر) مدیریت نشده‌اند. می‌توان با افزودن `try-except` این موارد را بهبود داد.
- **تأخیر**: استفاده از `time.sleep(1)` برای جلوگیری از درخواست‌های بیش‌ازحد به API.
- **امنیت**: توکن ربات در کد هاردکد شده است. بهتر است از متغیرهای محیطی (environment variables) استفاده شود.

---

## پیشنهادات بهبود
1. افزودن مدیریت خطا برای درخواست‌های API.
2. ذخیره‌سازی `user_states` در یک پایگاه داده (مانند SQLite) برای پایداری بیشتر.
3. افزودن امکان بازگشت به منوی اصلی با دستور `/menu`.
4. پشتیبانی از دکمه‌های سفارشی توسط کاربر.
5. افزودن قابلیت چندزبانه برای پیام‌ها.

---

## نمونه اجرای ربات
1. کاربر: `/start`
   - ربات: 
     ```
     🎓 خوش آمدید! یکی از گزینه‌ها رو انتخاب کنید:
     [ [۱] [۲] [۳] ]
     ```
2. کاربر: `۲`
   - ربات:
     ```
     ۲ دکمه معمولی فعال شد:
     [ [گزینه ۱] [گزینه ۲] ]
     [ [+] [-] ]
     ```
3. کاربر: `+`
   - ربات:
     ```
     تعداد دکمه‌ها: ۳
     [ [گزینه ۱] [گزینه ۲] [گزینه ۳] ]
     [ [+] [-] ]
     ```
4. کاربر: `-`
   - ربات:
     ```
     تعداد دکمه‌ها: ۲
     [ [گزینه ۱] [گزینه ۲] ]
     [ [+] [-] ]
     ```

---

این سناریو به‌صورت ساده و واضح طراحی شده و می‌تواند به‌عنوان پایه‌ای برای توسعه ربات‌های پیچیده‌تر استفاده شود.
```