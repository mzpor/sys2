مسیر فایل: همیشه مسیر فایل رو به‌صورت ثابت و امن تعریف کن (مثل ./data/users.json).
اعتبارسنجی: قبل از خواندن/نوشتن، ساختار JSON و داده‌های ورودی رو چک کن.
امنیت: از قفل برای هم‌زمانی و رمزنگاری برای داده‌های حساس استفاده کن.
بک‌آپ: یه مکانیزم بک‌آپ‌گیری دوره‌ای پیاده‌سازی کن و بک‌آپ‌های قدیمی رو مدیریت کن.
لاگ: تمام عملیات رو لاگ کن تا بتونی خطاها رو ردیابی کنی.
مدیریت خطا: برای هر عملیات فایل (خواندن، نوشتن، بک‌آپ) مدیریت خطا داشته باش.
بهینه‌سازی: برای فایل‌های بزرگ، فقط بخش‌های لازم رو به‌روزرسانی کن و از بازنویسی کامل فایل اجتناب کن.


###########
سناریو: مدیریت فایل JSON برای ربات ثبت اطلاعات کاربر
📖 توضیحات سناریو
این سناریو برای یه ربات پایتونی طراحی شده که اطلاعات کاربر (مثل نام، شماره تلفن، و کد ملی) رو دریافت می‌کنه و توی یه فایل JSON ذخیره می‌کنه. ربات باید امن، مقیاس‌پذیر، و مقاوم در برابر خطا باشه. نکات مدیریت فایل هم توی مستندات گنجانده شده تا موقع کدنویسی همه‌چیز رعایت بشه.

🛠️ مراحل پیاده‌سازی
1️⃣ بررسی وجود فایل JSON
عملکرد: اگر فایل users.json وجود نداشته باشه، یه فایل خالی با محتوای {} ساخته می‌شه.
نکات فایل:
مسیر فایل رو ثابت نگه دار (مثلاً ./data/users.json).
از دسترسی غیرمجاز با تنظیم مجوزهای فایل (مثل chmod 600) جلوگیری کن.
قبل از هر عملیاتی، وجود فایل رو بررسی کن.
2️⃣ بارگذاری و اعتبارسنجی فایل
عملکرد: فایل JSON خونده می‌شه و اگر خراب بود، از بک‌آپ بازیابی می‌شه.
نکات فایل:
از try-except برای مدیریت خطای JSONDecodeError استفاده کن.
اگر فایل خراب بود، یه لاگ ثبت کن و بک‌آپ رو لود کن.
محتوای فایل رو قبل از پردازش اعتبارسنجی کن (مثلاً چک کن که یه دیکشنری معتبره).
3️⃣ ذخیره اطلاعات کاربر
عملکرد: اطلاعات کاربر (مثل {"name": "علی", "phone": "09123456789"}) با یه شناسه منحصربه‌فرد (مثل user_001) ذخیره می‌شه.
نکات فایل:
فقط بخش مربوط به کاربر رو به‌روزرسانی کن، نه کل فایل رو.
از قفل (مثل threading.Lock) برای جلوگیری از تداخل در نوشتن همزمان استفاده کن.
داده‌ها رو قبل از ذخیره اعتبارسنجی کن (مثلاً نوع داده‌ها یا وجود کلیدهای لازم).
4️⃣ بک‌آپ‌گیری دوره‌ای
عملکرد: هر ۵ تغییر یا هر ۱۰ دقیقه، یه بک‌آپ از فایل JSON توی یه مسیر جدا (مثل ./backups/users_20250729.json) ذخیره می‌شه.
نکات فایل:
بک‌آپ‌ها رو با نام‌های منحصربه‌فرد (مثل بر اساس تاریخ) ذخیره کن.
بک‌آپ‌های قدیمی (مثلاً قدیمی‌تر از ۳۰ روز) رو به‌صورت خودکار پاک کن.
قبل از بک‌آپ‌گیری، مطمئن شو که فایل اصلی سالمه.
5️⃣ لاگ‌گیری عملیات
عملکرد: هر عملیات (مثل ذخیره موفق یا خطا) توی یه فایل لاگ (مثل app.log) ثبت می‌شه.
نکات فایل:
از کتابخانه logging استفاده کن و لاگ‌ها رو با سطح مناسب (مثل INFO یا ERROR) ثبت کن.
لاگ‌ها رو توی یه فایل جدا ذخیره کن و از چرخش لاگ (log rotation) برای مدیریت حجم استفاده کن.
6️⃣ مدیریت امنیت
عملکرد: فایل JSON فقط برای پروسه ربات قابل دسترسیه و داده‌های حساس رمزنگاری می‌شن.
نکات فایل:
مجوزهای فایل رو محدود کن (مثل os.chmod(file, 0o600) در پایتون).
داده‌های حساس (مثل کد ملی) رو قبل از ذخیره با کتابخانه‌ای مثل cryptography رمزنگاری کن.
مسیر فایل رو از ورودی‌های کاربر جدا نگه دار تا از حملات path traversal جلوگیری بشه.
7️⃣ مدیریت خطاها
عملکرد: خطاهایی مثل خرابی فایل، عدم دسترسی، یا داده نامعتبر مدیریت می‌شن و پیام مناسب به کاربر نشون داده می‌شه.
نکات فایل:
خطاهای احتمالی (مثل PermissionError یا IOError) رو با try-except مدیریت کن.
یه نسخه بک‌آپ همیشه در دسترس باشه تا در صورت خرابی فایل اصلی، داده‌ها از دست نرن.
پیام‌های خطا رو ساده و غیرفنی نگه دار (مثل «خطا در ذخیره‌سازی، لطفاً دوباره امتحان کنید»).