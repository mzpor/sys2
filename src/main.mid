### سناریوی دقیق و با جزئیات برای ربات ثبت‌نام و مدیریت آموزشگاه قرآنی

بر اساس کد ارائه‌شده و درخواست شما، یک سناریوی کامل و دقیق برای عملکرد ربات ارائه می‌شود که شامل فرآیند ثبت‌نام، پرداخت، مدیریت کلاس‌ها، و پنل مدیریتی است. این سناریو با در نظر گرفتن پیکربندی دستی مدیران، اطلاع‌رسانی به مدیران پس از ثبت‌نام و پرداخت، و امکان مدیریت کلاس‌ها از طریق پنل طراحی شده است. همچنین، ویژگی‌های اضافی مانند حذف حساب کاربری و مدیریت فایل JSON با بکاپ نیز گنجانده شده است.

---

## پیکربندی اولیه

### تنظیمات و توکن‌ها
- **توکن ربات**:
  ```python
  BOT_TOKEN = "1778171143:vD6rjJXAYidLL7hQyQkBeu5TJ9KpRd4zAKegqUt3"
  API_URL = f"https://tapi.bale.ai/bot{BOT_TOKEN}/getUpdates"
  SEND_URL = f"https://tapi.bale.ai/bot{BOT_TOKEN}/sendMessage"
  BASE_URL = f"https://tapi.bale.ai/bot{BOT_TOKEN}"
  ```
- **فایل داده**:
  - اطلاعات کاربران در فایل `1.json` ذخیره می‌شود.
  - در صورت خرابی فایل، یک نسخه بکاپ با نام `1_backup.json` ایجاد می‌شود و فایل جدید ساخته می‌شود.
- **پیکربندی مدیران**:
  ```python
  ADMIN_PHONES = {
      "989942878984": "مدیر",
      "989123456789": "معاون",
      "989339253803": "مربی"
  }
  ```
  - نقش‌ها: مدیر، معاون، مربی
  - مدیران از طریق شماره تلفن شناسایی می‌شوند.
- **لیست کلاس‌ها** (قابل تنظیم در فایل JSON و حافظه موقت):
  ```python
  CLASSES = {
      "quran_recitation": {
          "name": "رشت بری",
          "price": "1,000 تومان",
          "schedule": "شنبه‌ها و سه‌شنبه‌ها ساعت 18:00",
          "subject": "lahn1",
          "link": "ble.ir/join/Gah9cS9LzQ"
      },
      "tajvid": {
          "name": "جاجی زاده",
          "price": "1,000 تومان",
          "schedule": "یکشنبه‌ها و چهارشنبه‌ها ساعت 20:00",
          "subject": "lahn2",
          "link": "ble.ir/join/Gah9cS9LzQ"
      }
  }
  ```
  - فایل JSON برای ذخیره کلاس‌ها: `classes.json`
  - تغییرات در حافظه موقت و فایل JSON اعمال می‌شود.

### ویژگی‌های ذخیره‌سازی
- **ذخیره‌سازی اطلاعات کاربران**:
  - اطلاعات در فایل `1.json` ذخیره می‌شود و فقط آخرین اطلاعات کاربر (بدون تاریخچه) نگهداری می‌شود.
  - در صورت خرابی فایل، بکاپ در `1_backup.json` ذخیره شده و فایل جدید ساخته می‌شود.
- **ذخیره‌سازی کلاس‌ها**:
  - کلاس‌ها در فایل `classes.json` ذخیره می‌شوند.
  - تغییرات از طریق پنل مدیریتی در حافظه موقت و فایل JSON اعمال می‌شود.
- **مدیریت خطاها**:
  - در صورت خرابی فایل JSON، بکاپ گرفته شده و فایل جدید ساخته می‌شود.
  - گزارش‌های خطا با `logging` فقط در کنسول نمایش داده می‌شوند (ذخیره نمی‌شوند).

---

## سناریوی کاربری

### مرحله ۱: شروع
- **کاربر دستور `/start` را در چت خصوصی وارد می‌کند**.
- **بررسی ثبت‌نام قبلی**:
  - اگر کاربر در `registered_users` یا فایل `1.json` موجود باشد:
    - پیام خوش‌آمدگویی:
      ```
      🌟 [نام کوچک] عزیز، خوش آمدید!
      حساب کاربری شما:
      نام: [نام کامل]
      کد ملی: [کد ملی]
      تلفن: [شماره تلفن]
      ```
    - بررسی نقش کاربر (مدیر/معاون/مربی) با استفاده از شماره تلفن در `ADMIN_PHONES`:
      - **اگر مدیر باشد**:
        - پیام اضافی:
          ```
          👑 شما به عنوان [نقش] شناسایی شدید!
          ```
        - کیبورد شیشه‌ای:
          ```python
          [
              [{"text": "✅ تأیید نهایی", "callback_data": "final_confirm"}],
              [{"text": "✏️ تصحیح اطلاعات", "callback_data": "edit_info"}],
              [{"text": "👑 ورود به پنل مدیریتی", "callback_data": "admin_panel"}]
          ]
          ```
      - **اگر کاربر عادی باشد**:
        - کیبورد شیشه‌ای:
          ```python
          [
              [{"text": "✅ تأیید نهایی", "callback_data": "final_confirm"}],
              [{"text": "✏️ تصحیح اطلاعات", "callback_data": "edit_info"}],
              [{"text": "🗑️ حذف حساب", "callback_data": "delete_account"}]
          ]
          ```
    - کیبورد معمولی (برای همه کاربران):
      ```python
      [
          [{"text": "شروع مجدد"}],
          [{"text": "کلاس"}],
          [{"text": "خروج"}]
      ]
      ```
  - اگر کاربر جدید باشد:
    - پیام خوش‌آمدگویی:
      ```
      🌟 خوش آمدید! به ربات ثبت‌نام مدرسه تلاوت خوش آمدید. لطفاً ابتدا ثبت‌نام کنید!
      ```
    - کیبورد شیشه‌ای:
      ```python
      [[{"text": "📝 ثبت‌نام", "callback_data": "start_registration"}]]
      ```
    - کیبورد معمولی:
      ```python
      [
          [{"text": "شروع مجدد"}],
          [{"text": "معرفی آموزشگاه"}],
          [{"text": "خروج"}]
      ]
      ```

### مرحله ۲: دریافت نام و نام خانوادگی
- کاربر دکمه "📝 ثبت‌نام" را انتخاب می‌کند.
- پیام:
  ```
  لطفاً نام و نام خانوادگی خود را وارد کنید (مثال: علی رضایی).
  ```
- کاربر متن (مثال: `علی رضایی`) را وارد می‌کند.
- **اعتبارسنجی**:
  - اگر ورودی خالی یا کمتر از دو کلمه باشد:
    ```
    لطفاً نام و نام خانوادگی معتبر وارد کنید (مثال: علی رضایی).
    ```
- **ذخیره‌سازی**:
  - اطلاعات در `private_signup_states` و فایل `1.json` ذخیره می‌شود:
    ```python
    private_signup_states[user_id] = {
        "first_name": "علی",
        "last_name": "رضایی",
        "step": "waiting_national_id"
    }
    ```
- پیام تأیید:
  ```
  علی عزیز،
  نام شما: علی رضایی
  کد ملی: هنوز مانده
  تلفن: هنوز مانده
  لطفاً کد ملی ۱۰ رقمی خود را وارد کنید.
  ```
- کیبورد معمولی:
  ```python
  [
      [{"text": "شروع مجدد"}],
      [{"text": "خروج"}],
      [{"text": "برگشت به قبل"}]
  ]
  ```
- کیبورد شیشه‌ای:
  ```python
  [[{"text": "✏️ تصحیح نام", "callback_data": "edit_name"}]]
  ```

### مرحله ۳: دریافت کد ملی
- کاربر کد ملی (مثال: `1234567890`) را وارد می‌کند.
- **اعتبارسنجی**:
  - اگر کد ملی ۱۰ رقم نباشد یا شامل حروف/اعداد فارسی باشد:
    ```
    کد ملی نامعتبر است. لطفاً یک کد ملی ۱۰ رقمی معتبر (فقط اعداد انگلیسی) وارد کنید.
    ```
- **ذخیره‌سازی**:
  - اطلاعات در `private_signup_states` و فایل `1.json` به‌روزرسانی می‌شود:
    ```python
    private_signup_states[user_id]["national_id"] = "1234567890"
    private_signup_states[user_id]["step"] = "waiting_phone_contact"
    ```
- پیام تأیید:
  ```
  علی عزیز،
  نام شما: علی رضایی
  کد ملی: 1234567890
  تلفن: هنوز مانده
  لطفاً برای ارسال شماره تلفن خود، روی دکمه زیر بزنید.
  ```
- کیبورد معمولی:
  ```python
  [
      [{"text": "شروع مجدد"}],
      [{"text": "خروج"}],
      [{"text": "برگشت به قبل"}]
  ]
  ```
- کیبورد شیشه‌ای:
  ```python
  [
      [{"text": "✏️ تصحیح کد ملی", "callback_data": "edit_national_id"}],
      [{"text": "📱 ارسال شماره تلفن", "request_contact": True}]
  ]
  ```

### مرحله ۴: دریافت شماره تلفن
- کاربر دکمه "📱 ارسال شماره تلفن" را انتخاب کرده و شماره (مثال: `+989123456789`) را ارسال می‌کند.
- **اعتبارسنجی**:
  - اگر شماره نامعتبر باشد یا از دکمه استفاده نشود:
    ```
    شماره تلفن نامعتبر است. لطفاً از دکمه ارسال شماره تلفن استفاده کنید.
    ```
- **ذخیره‌سازی**:
  - اطلاعات در `private_signup_states` و فایل `1.json` ذخیره می‌شود:
    ```python
    private_signup_states[user_id]["mobile"] = "+989123456789"
    private_signup_states[user_id]["step"] = "waiting_final_confirmation"
    ```
- پیام تأیید:
  ```
  📋 علی عزیز، حساب کاربری شما:
  نام: علی رضایی
  کد ملی: 1234567890
  تلفن: +989123456789
  آیا اطلاعات درست است؟
  ```
- **بررسی نقش مدیر**:
  - اگر شماره تلفن در `ADMIN_PHONES` باشد:
    - پیام اضافی:
      ```
      👑 شما به عنوان [نقش] شناسایی شدید!
      ```
    - کیبورد شیشه‌ای:
      ```python
      [
          [{"text": "✅ تأیید نهایی", "callback_data": "final_confirm"}],
          [{"text": "✏️ تصحیح نام", "callback_data": "edit_name"}],
          [{"text": "✏️ تصحیح کد ملی", "callback_data": "edit_national_id"}],
          [{"text": "📱 تصحیح شماره تلفن", "callback_data": "edit_phone"}],
          [{"text": "👑 ورود به پنل مدیریتی", "callback_data": "admin_panel"}]
      ]
      ```
  - اگر کاربر عادی باشد:
    - کیبورد شیشه‌ای:
      ```python
      [
          [{"text": "✅ تأیید نهایی", "callback_data": "final_confirm"}],
          [{"text": "✏️ تصحیح نام", "callback_data": "edit_name"}],
          [{"text": "✏️ تصحیح کد ملی", "callback_data": "edit_national_id"}],
          [{"text": "📱 تصحیح شماره تلفن", "callback_data": "edit_phone"}],
          [{"text": "🗑️ حذف حساب", "callback_data": "delete_account"}]
      ]
      ```
- کیبورد معمولی (برای همه):
  ```python
  [
      [{"text": "شروع مجدد"}],
      [{"text": "خروج"}],
      [{"text": "برگشت به قبل"}]
  ]
  ```

### مرحله ۵: تأیید نهایی ثبت‌نام
- **اگر کاربر "تأیید نهایی" را انتخاب کند**:
  - اطلاعات از `private_signup_states` به `registered_users` منتقل شده و در `1.json` ذخیره می‌شود:
    ```python
    registered_users[user_id] = {
        "first_name": "علی",
        "last_name": "رضایی",
        "national_id": "1234567890",
        "mobile": "+989123456789",
        "registered_class": None
    }
    save_users_to_file()
    ```
  - پیام:
    ```
    🎉 علی عزیز، ثبت‌نام شما با موفقیت تکمیل شد! لطفاً کلاس مورد نظر خود را انتخاب کنید.
    ```
  - انتقال به مرحله انتخاب کلاس (مرحله ۶).
- **اگر کاربر "تصحیح" را انتخاب کند**:
  - به مرحله مربوطه (نام، کد ملی، یا شماره تلفن) بازمی‌گردد.
  - اطلاعات جدید جایگزین اطلاعات قبلی در `private_signup_states` و `1.json` می‌شود.
- **اگر کاربر "حذف حساب" را انتخاب کند**:
  - اطلاعات کاربر از `registered_users` و فایل `1.json` حذف می‌شود.
  - پیام:
    ```
    🗑️ حساب کاربری شما با موفقیت حذف شد. می‌توانید دوباره با /start ثبت‌نام کنید.
    ```
  - کاربر به حالت کاربر جدید بازمی‌گردد.
- **اگر مدیر "ورود به پنل مدیریتی" را انتخاب کند**:
  - انتقال به پنل مدیریتی (مرحله ۸).

### مرحله ۶: انتخاب کلاس
- پیام:
  ```
  🌟 علی عزیز، لطفاً کلاس مورد نظر خود را انتخاب کنید:
  ```
- کیبورد معمولی:
  ```python
  [
      [{"text": "شروع مجدد"}],
      [{"text": "خروج"}],
      [{"text": "برگشت به قبل"}]
  ]
  ```
- کیبورد شیشه‌ای (بر اساس `CLASSES`):
  ```python
  [
      [{"text": "📚 رشت بری (1,000 تومان)", "callback_data": "select_class_quran_recitation"}],
      [{"text": "📚 جاجی زاده (1,000 تومان)", "callback_data": "select_class_tajvid"}]
  ]
  ```

### مرحله ۷: پرداخت
- کاربر کلاس را انتخاب می‌کند (مثال: `رشت بری`).
- پیام:
  ```
  شما کلاس رشت بری را انتخاب کردید.
  هزینه: 1,000 تومان
  برنامه: شنبه‌ها و سه‌شنبه‌ها ساعت 18:00
  موضوع: lahn1
  برای ادامه، لطفاً پرداخت را انجام دهید.
  ```
- کیبورد شیشه‌ای:
  ```python
  [[{"text": "💸 لینک پرداخت", "callback_data": "show_payment_quran_recitation"}]]
  ```
- کاربر دکمه "لینک پرداخت" را انتخاب می‌کند:
  - ربات لینک پرداخت (مثال: `https://example.com/pay/quran`) را نمایش می‌دهد:
    ```
    لطفاً برای نهایی کردن ثبت‌نام، از طریق لینک زیر پرداخت را انجام دهید:
    https://example.com/pay/quran
    پس از پرداخت، روی دکمه "پرداخت کردم" کلیک کنید.
    ```
  - کیبورد شیشه‌ای:
    ```python
    [[{"text": "پرداخت کردم", "callback_data": "payment_completed"}]]
    ```
- **پس از پرداخت موفق**:
  - اطلاعات کلاس در `registered_users` ذخیره می‌شود:
    ```python
    registered_users[user_id]["registered_class"] = "quran_recitation"
    save_users_to_file()
    ```
  - پیام به کاربر:
    ```
    💸 پرداخت برای 'رشت بری' با موفقیت انجام شد!
    📎 لینک ورود به گروه: ble.ir/join/Gah9cS9LzQ
    🎉 از اینکه همراه شدید، بی‌نهایت سپاسگزاریم!
    ```
  - کیبورد معمولی:
    ```python
    [
        [{"text": "شروع مجدد"}],
        [{"text": "کلاس"}],
        [{"text": "خروج"}]
    ]
    ```
  - **اطلاع‌رسانی به مدیران**:
    - پیام خصوصی به تمام شماره‌های موجود در `ADMIN_PHONES`:
      ```
      📢 ثبت‌نام جدید:
      نام: علی رضایی
      کد ملی: 1234567890
      تلفن: +989123456789
      کلاس: رشت بری
      تاریخ: [تاریخ جلالی]
      ```
- **اگر پرداخت ناموفق باشد**:
  - پیام:
    ```
    پرداخت ناموفق بود. لطفاً دوباره تلاش کنید یا با پشتیبانی تماس بگیرید.
    ```

### مرحله ۸: پنل مدیریتی
- **ورود به پنل**:
  - فقط برای کاربرانی که شماره تلفن آنها در `ADMIN_PHONES` باشد.
  - پیام:
    ```
    👑 [نقش] عزیز، به پنل مدیریتی خوش آمدید!
    ```
  - کیبورد شیشه‌ای:
    ```python
    [
        [{"text": "📊 آمار کاربران", "callback_data": "admin_stats"}],
        [{"text": "📚 مدیریت کلاس‌ها", "callback_data": "admin_manage_classes"}],
        [{"text": "⚙️ تنظیمات", "callback_data": "admin_settings"}],
        [{"text": "🔙 خروج از پنل", "callback_data": "exit_admin_panel"}]
    ]
    ```

#### گزینه‌های پنل مدیریتی
1. **📊 آمار کاربران**:
   - نمایش تعداد کل کاربران، کاربران تکمیل‌شده (ثبت‌نام کامل)، و کاربران ناقص (در حال ثبت‌نام).
   - پیام:
     ```
     📊 آمار کاربران:
     👥 کل کاربران: [تعداد]
     ✅ ثبت‌نام کامل: [تعداد]
     ⚠️ ثبت‌نام ناقص: [تعداد]
     📋 لیست کاربران:
     1. علی رضایی - کد ملی: 1234567890 - تلفن: +989123456789 - کلاس: رشت بری
     ...
     ```
   - کیبورد شیشه‌ای:
     ```python
     [[{"text": "🔙 بازگشت به پنل", "callback_data": "admin_panel"}]]
     ```

2. **📚 مدیریت کلاس‌ها**:
   - گزینه‌ها:
     - افزودن کلاس جدید
     - ویرایش کلاس موجود
     - حذف کلاس
   - پیام:
     ```
     📚 مدیریت کلاس‌ها:
     لطفاً یکی از گزینه‌ها را انتخاب کنید:
     ```
   - کیبورد شیشه‌ای:
     ```python
     [
         [{"text": "➕ افزودن کلاس جدید", "callback_data": "add_class"}],
         [{"text": "✏️ ویرایش کلاس", "callback_data": "edit_class"}],
         [{"text": "🗑️ حذف کلاس", "callback_data": "delete_class"}],
         [{"text": "🔙 بازگشت به پنل", "callback_data": "admin_panel"}]
     ]
     ```
   - **افزودن کلاس جدید**:
     - درخواست اطلاعات (نام، قیمت، برنامه، موضوع، لینک).
     - ذخیره در `CLASSES` و `classes.json`.
   - **ویرایش کلاس**:
     - نمایش لیست کلاس‌ها و انتخاب برای ویرایش.
     - به‌روزرسانی در `CLASSES` و `classes.json`.
   - **حذف کلاس**:
     - نمایش لیست کلاس‌ها و انتخاب برای حذف.
     - حذف از `CLASSES` و `classes.json`.

3. **⚙️ تنظیمات**:
   - برای افزودن قابلیت‌های آینده (مثال: تغییر توکن، تنظیم پیام‌های خوش‌آمدگویی).
   - پیام:
     ```
     ⚙️ تنظیمات در حال توسعه است.
     ```
   - کیبورد شیشه‌ای:
     ```python
     [[{"text": "🔙 بازگشت به پنل", "callback_data": "admin_panel"}]]
     ```

4. **🔙 خروج از پنل**:
   - بازگشت به منوی اصلی کاربر.

---

## مدیریت دکمه‌های معمولی
- **معرفی آموزشگاه**:
  - پیام:
    ```
    🏫 معرفی مدرسه تلاوت قرآن
    🌟 مدرسه تلاوت قرآن، مرکزی تخصصی برای آموزش تلاوت قرآن کریم است.
    📚 خدمات ما:
    • آموزش تلاوت قرآن با اساتید مجرب
    • کلاس‌های حضوری و آنلاین
    • برنامه‌های متنوع برای همه سطوح
    • گواهی پایان دوره معتبر
    🎯 اهداف آموزشی:
    • یادگیری اصول صحیح تلاوت
    • تقویت صوت و لحن
    • آشنایی با قواعد تجوید
    • آمادگی برای مسابقات قرآنی
    📞 برای اطلاعات بیشتر و ثبت‌نام، با ما در تماس باشید.
    ```
  - کیبورد معمولی:
    ```python
    [
        [{"text": "شروع مجدد"}],
        [{"text": "خروج"}],
        [{"text": "برگشت به قبل"}]
    ]
    ```
  - کیbورد شیشه‌ای:
    ```python
    [[{"text": "📝 ثبت‌نام", "callback_data": "start_registration"}]]
    ```

- **خروج**:
  - پیام:
    ```
    👋 خداحافظ! برای بازگشت، /start را بزنید.
    ```

- **برگشت به قبل**:
  - بازگشت به مرحله قبلی در فرآیند ثبت‌نام.

- **شروع مجدد**:
  - پاک کردن `private_signup_states[user_id]` (حافظه موقت).
  - پیام:
    ```
    🌟 فرآیند ثبت‌نام از ابتدا شروع شد. لطفاً نام و نام خانوادگی خود را وارد کنید.
    ```

---

## دستورالعمل‌های طراحی
- **پیام‌ها**:
  - کوتاه، محترمانه، با استفاده از نام کوچک کاربر.
  - استفاده از ایموجی‌ها: 🌟، ✅، ✏️، 📍، 📱، 📋، 💸، 🎉.
  - فرمت ثابت:
    ```
    [نام کوچک] عزیز،
    نام شما: [نام کامل]
    کد ملی: [کد ملی یا هنوز مانده]
    تلفن: [تلفن یا هنوز مانده]
    ```
- **کیبوردها**:
  - کیبورد معمولی برای گزینه‌های ثابت.
  - کیبورد شیشه‌ای برای اقدامات خاص (تأیید، تصحیح، انتخاب کلاس).
  - دکمه شماره تلفن با `request_contact: True`.
- **مدیریت خطاها**:
  - پیام‌های خطا محترمانه:
    ```
    لطفاً ورودی معتبر وارد کنید.
    ```
  - در صورت خرابی فایل JSON:
    - بکاپ در `1_backup.json` ذخیره می‌شود.
    - فایل جدید `1.json` ساخته می‌شود.
- **گزارش‌ها**:
  - گزارش‌ها با `logging` در کنسول (بدون ذخیره در فایل).
  - مثال:
    ```python
    logging.info("User registered successfully: user_id=%s", user_id)
    ```

---

## تغییرات پیشنهادی در کد
برای پیاده‌سازی این سناریو، کد باید به‌روزرسانی شود. تغییرات پیشنهادی شامل موارد زیر است:

1. **افزودن پیکربندی مدیران**:
   ```python
   ADMIN_PHONES = {
       "989942878984": "مدیر",
       "989123456789": "معاون",
       "989339253803": "مربی"
   }
   ```

2. **مدیریت فایل کلاس‌ها**:
   ```python
   CLASSES_FILE = "classes.json"

   def load_classes_from_file():
       global CLASSES
       if os.path.exists(CLASSES_FILE):
           try:
               with open(CLASSES_FILE, 'r', encoding='utf-8') as f:
                   CLASSES = json.load(f)
           except Exception as e:
               logging.error(f"Error loading classes file: {e}")
               save_classes_to_file()  # Create new file if corrupted

   def save_classes_to_file():
       try:
           with open(CLASSES_FILE, 'w', encoding='utf-8') as f:
               json.dump(CLASSES, f, ensure_ascii=False, indent=2)
       except Exception as e:
           logging.error(f"Error saving classes file: {e}")

   load_classes_from_file()
   ```

3. **مدیریت بکاپ فایل کاربران**:
   ```python
   def save_users_to_file():
       try:
           if os.path.exists(TXT_FILE):
               import shutil
               shutil.copy(TXT_FILE, "1_backup.json")
           with open(TXT_FILE, 'w', encoding='utf-8') as f:
               json.dump(registered_users, f, ensure_ascii=False, indent=2)
       except Exception as e:
           logging.error(f"Error saving users file: {e}")
           with open(TXT_FILE, 'w', encoding='utf-8') as f:
               json.dump({}, f, ensure_ascii=False, indent=2)

   def load_users_from_file():
       global registered_users
       if os.path.exists(TXT_FILE):
           try:
               with open(TXT_FILE, 'r', encoding='utf-8') as f:
                   registered_users = json.load(f)
           except Exception as e:
               logging.error(f"Error loading users file: {e}")
               import shutil
               shutil.copy(TXT_FILE, "1_backup.json")
               registered_users = {}
               save_users_to_file()
   ```

4. **حذف حساب کاربری**:
   ```python
   def handle_delete_account(chat_id, user_id):
       if user_id in registered_users:
           del registered_users[user_id]
           save_users_to_file()
           if user_id in private_signup_states:
               del private_signup_states[user_id]
           send_message(chat_id, "🗑️ حساب کاربری شما با موفقیت حذف شد. می‌توانید دوباره با /start ثبت‌نام کنید.")
           show_main_menu(chat_id, user_id)
       else:
           send_message(chat_id, "شما هنوز ثبت‌نام نکرده‌اید!")
   ```

5. **اطلاع‌رسانی به مدیران**:
   ```python
   def notify_admins(user_id, user_data, class_id):
       class_name = CLASSES[class_id]["name"]
       message = (
           f"📢 ثبت‌نام جدید:\n"
           f"نام: {user_data['first_name']} {user_data['last_name']}\n"
           f"کد ملی: {user_data['national_id']}\n"
           f"تلفن: {user_data['mobile']}\n"
           f"کلاس: {class_name}\n"
           f"تاریخ: {get_jalali_date()}"
       )
       for admin_phone, role in ADMIN_PHONES.items():
           # Find admin user_id by phone number (requires mapping)
           for uid, data in registered_users.items():
               if data["mobile"] == admin_phone:
                   send_message(uid, message)
                   break
   ```

6. **پنل مدیریتی**:
   ```python
   def handle_admin_panel(chat_id, user_id):
       if user_id in registered_users and registered_users[user_id]["mobile"] in ADMIN_PHONES:
           role = ADMIN_PHONES[registered_users[user_id]["mobile"]]
           send_message(
               chat_id,
               f"👑 {role} عزیز، به پنل مدیریتی خوش آمدید!",
               reply_markup=create_keyboard([
                   [{"text": "📊 آمار کاربران", "callback_data": "admin_stats"}],
                   [{"text": "📚 مدیریت کلاس‌ها", "callback_data": "admin_manage_classes"}],
                   [{"text": "⚙️ تنظیمات", "callback_data": "admin_settings"}],
                   [{"text": "🔙 خروج از پنل", "callback_data": "exit_admin_panel"}]
               ])
           )
       else:
           send_message(chat_id, "شما دسترسی به پنل مدیریتی ندارید!")
   ```

---

## نکات نهایی
- ربات کاربرپسند، پاسخ‌گو، و با تجربه کاربری جذاب طراحی شده است.
- فرآیند ثبت‌نام یکپارچه و منطقی است.
- پنل مدیریتی امکان مدیریت کلاس‌ها و مشاهده آمار را فراهم می‌کند.
- اطلاع‌رسانی به مدیران پس از ثبت‌نام و پرداخت، ارتباط بین مدیران و کاربران را تقویت می‌کند.
- قابلیت حذف حساب، کاربران را قادر می‌سازد به حالت کاربر جدید بازگردند.
- مدیریت فایل‌ها با بکاپ، از خرابی داده‌ها جلوگیری می‌کند.